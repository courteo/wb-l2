package pattern

import "fmt"

/*
Применимость паттерна "Фасад" возникает в случаях, когда имеется сложная система, 
состоящая из множества взаимосвязанных классов или модулей, и необходимо упростить ее использование путем предоставления 
унифицированного интерфейса. Фасад выступает в роли посредника между клиентом и внутренними компонентами системы, скрывая детали 
реализации и предоставляя упрощенный интерфейс, с которым клиент может взаимодействовать.

Преимущества использования паттерна "Фасад" включают:

1.Упрощение использования сложной системы. 
2.Улучшение поддерживаемости и расширяемости. 

Некоторые возможные недостатки паттерна "Фасад" включают:

1.Возможное увеличение сложности фасада. 
2.Ограниченность функциональности. 

Примеры использования паттерна "Фасад" в реальных приложениях включают:

Библиотеки для работ со сложными API. Фасад может предоставлять простой интерфейс для взаимодействия с API, 
скрывая сложность вызовов и параметров

*/



// какая-то структура А со своими методами
type A struct{}

// первый метод структуры А
func (s *A) A1() {
	fmt.Println("First method of A")
}

// второй метод структуры А
func (s *A) A2() {
	fmt.Println("Second method of A")
}

// какая-то структура В со своими методами
type B struct{}

// первым метод структуры В
func (s *B) B1() {
	fmt.Println("First method of B")
}

// Второй метод структуры В
func (s *B) B2() {
	fmt.Println("Second method of B")
}

// Простой интерфейс для клиентов
type Facade struct {
	A *A
	B *B
}

// Функция создания
func NewFacade() *Facade {
	return &Facade{
		A: &A{},
		B: &B{},
	}
}

// операции фасада в которых используются методы структур А В
func (f *Facade) Operation1() {
	fmt.Println("first operation")
	f.A.A1()
	f.B.B1()
}


func (f *Facade) Operation2() {
	fmt.Println("second operation")
	f.A.A2()
	f.B.B2()
}

func FacadeFunc() {
	facade := NewFacade()

	facade.Operation1()
	facade.Operation2()
}




